#!/usr/bin/env swish

;;; Copyright 2018 Beckman Coulter, Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use, copy,
;;; modify, merge, publish, distribute, sublicense, and/or sell copies
;;; of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;;; DEALINGS IN THE SOFTWARE.

(define verbosity (make-parameter 0))

(define help-sections '(all details examples))

(define escape-hatch
  (cli-specs
   [explicit-source -- (list . "<source>") "source filename"]))

(define shared-cli
  (cli-specs
   [verbose -v count "show more compiler messages"]
   [output-file -o (string "<output>") "write output to <output>"]
   [libdirs -L (list "<libdir>") "add <libdir> to library-directories"]
   [srcdirs -s (list "<srcdir>") "add <srcdir> to source-directories"]
   [rt-libs --rtlib (list "<lib>" ...)
    '("visit compiled libraries <lib> ... before compiling <source>;"
      "these libraries are added to <output> unless otherwise"
      "specified, in which case they must be provided at run time."
      "Look for <lib> ... in library-directories (-L) if not found.")]
   [help -h --help (list "[<section>]" ...)
    (format "display help, <section>={~{~a~^|~}}" help-sections)]
   [version --version bool "print version information"]
   ))

(define library-cli
  (cli-specs
   [source-file (string "<source>") "library source filename (or -- <source>)"]
   [as-library --library bool "make a compiled library; <output> omits --rtlib libraries"
    (usage show req)]))

(define app-cli
  (cli-specs
   [source-file (string "<source>") "program source filename (or -- <source>)"]
   [component -c bool "make component; <output> omits --rtlib libraries"
    (conflicts '(boot-files))]
   [boot-files -b (list "<boot-file>")
    "make stand-alone program including <boot-file>"]
   [libs-visible --libs-visible bool
    "make imported libraries visible to eval"]))

(define swish-lib?
  (let ([libs (filter (lambda (lib) (match lib [(swish . ,_) #t] [,_ #f])) (library-list))])
    (lambda (lib)
      (member lib libs))))

(define swish-libdir (path-parent (osi_get_executable_path)))

(define (system-libdir swish-wpo?)
  (path-combine swish-libdir (if swish-wpo? "wpo" "lib")))

(define swish-core-library-filename
  (get-real-path (path-combine swish-libdir "swish-core.library")))

(define swish-library-filename
  (get-real-path (path-combine swish-libdir "swish.library")))

(define (swish-library-file? full-path)
  (or (string=? full-path swish-core-library-filename)
      (string=? full-path swish-library-filename)))

(define prevent-wpo (make-hashtable equal-hash equal?))

(define (library-setup swish-wpo? libdirs rt-libs)
  (when swish-wpo?
    ;; Allow whole-program optimization for swish libraries in stand-alone
    ;; programs, but not in libraries or compiled scripts where we'll be loading
    ;; the swish boot file.
    (for-each
     (lambda (lib)
       (match lib
         [(swish . ,_) (hashtable-set! prevent-wpo lib #f)]
         [,_ (void)]))
     (library-list)))
  ;; Disallow whole-program optimization for (swish app-core) and its
  ;; dependencies so we can bake these libraries into the boot file for
  ;; a stand-alone application where they can be used in the boot process.
  (let forbid! ([lib* '((swish app-core))])
    (match lib*
      [(,lib . ,more)
       (hashtable-set! prevent-wpo lib #t)
       (forbid! (library-requirements lib))
       (forbid! more)]
      [() (void)]))
  ;; visit --rtlib libraries (even swish libraries, so library-object-filename
  ;; points to a swish library file instead of swish.boot)
  (for-each visit rt-libs)
  ;; Disallow whole-program optimization for --rtlib libraries that will
  ;; be loaded separately at run time.
  (for-each
   (lambda (lib)
     (unless (hashtable-contains? prevent-wpo lib)
       (hashtable-set! prevent-wpo lib #t)))
   (library-list))
  (library-directories (cons (system-libdir swish-wpo?) libdirs))
  (when (> (verbosity) 1)
    (printf "Library directories:\n~{ ~s\n~}" (library-directories))))

(define who (app:name))

(define (fail fmt . args) (apply errorf who fmt args))

(define (wrap indent . texts)
  (wrap-text (current-output-port)
    (- (help-wrap-width) indent) indent indent (join texts #\space)))

(define-syntax example
  (syntax-rules ()
    [(_ (call ...) text ...)
     (begin
       (wrap 2 call ... "\n")
       (wrap 4 text ... "\n"))]))

(define-syntax any-sections
  (syntax-rules ()
    [(_ requested [(key ...) body ...] ...)
     (let ([sections requested])
       (define thunks
         (remq #f
           (list
            (and (ormap (lambda (x) (memq x sections)) '(key ...))
                 (lambda () body ...))
            ...)))
       (do ([ps thunks (cdr ps)] [sep "" "\n"]) ((null? ps))
         (display sep)
         ((car ps))))]))

(define (list-item item . texts)
  (printf "~4@a " item)
  (wrap-text (current-output-port) (- (help-wrap-width) 6) 0 5 (join texts #\space))
  (newline))

(define (usage short? sections ht)
  (define selected
    (cond
     [(pair? sections) sections]
     [short? '(usage)]
     [else '(usage help)]))
  (any-sections selected
    [(all usage)
     (display-usage "Usage:" who (append shared-cli app-cli))
     (display-usage "   or:" who (append shared-cli library-cli))]
    [(all help)
     (when ht (hashtable-delete! ht 'help))
     (display-options shared-cli ht)
     (printf "\n  Program target options:\n")
     (display-options app-cli ht)
     (printf "\n  Library target options:\n")
     (display-options library-cli ht)]
    [(all details)
     (define csvNNN.dll
       (format "csv~{~a~}.dll" (call-with-values scheme-version-number list)))
     (wrap 0
       who "can make a compiled library, a component program, a stand-alone program, or a linked program."
       "By default," who "creates a linked program.\n"
       "\n"
       "To compile a library, specify --library. The resulting compiled library may"
       "be loaded explicitly or used as a" who "--rtlib argument when compiling other"
       "libraries or programs.\n"
       "\n"
       "To create a component program, specify -c. A component program does not run on"
       "its own, but may be loaded by another program.\n"
       "\n"
       "When" who "creates a compiled library or component program, the resulting <output> contains"
       "compiled code for <source>  and the user libraries it references, but excludes"
       "built-in libraries and libraries supplied via --rtlib.\n"
       "\n"
       "To create a stand-alone program, specify -b and provide a base boot file."
       who "creates a stand-alone program"
       "by copying the swish executable to <out-file>"
       "and creating a boot file <out-file>.boot containing each"
       (format "-b~aboot-file" #\240)
       "in order, the run-time libraries included via --rtlib,"
       "the libraries required by <source>, and the compiled code"
       "for <source>.\n"
       "\n"
       "When run, a stand-alone program:\n")
     (list-item "1." "loads Chez Scheme's" csvNNN.dll "[Windows only],")
     (list-item "2." "loads the program boot file, then")
     (list-item "3." "invokes a custom scheme-start handler described below.\n")
     (wrap 0
       "To create a linked program, omit the -b option.\n\n"
       "When run, a linked program calls swish to:\n")
     (list-item "1." "load Chez Scheme's" csvNNN.dll "[Windows only],")
     (list-item "2." "load Chez Scheme's petite.boot and scheme.boot,")
     (list-item "3." "load the standard swish boot file, then")
     (list-item "4." "invoke swish-start with the compiled program as the first argument,"
       "followed by the arguments provided on the command line.\n")
     (wrap 0 "On start-up a program (linked, stand-alone, or script):\n")
     (list-item "1." "sets app:name, app:path, command-line, and command-line-arguments")
     (list-item "2." "installs an exception handler that prints app:name, if non-false, and")
     (list-item "3." "invokes the program code.")
     (wrap 0
       "\n"
       "Compiling a linked program or stand-alone program incorporates any --rtlib libraries"
       "directly into the <output> file."
       "If a program loads other compiled libraries explicitly at run time, it must also load"
       "any --rtlib libraries they require."
       "The compiler skips --rtlib libraries during whole-library or whole-program"
       "optimization.\n")]
    [(all examples)
     (printf "Examples:\n")
     (newline)
     (example (who "-o foo -b petite foo.ss")
       "builds a stand-alone \"foo\" executable from \"foo.ss\""
       "using the same petite.boot that swish uses.\n")
     (example (who "-o foo -b petite -b scheme foo.ss")
       "builds a stand-alone \"foo\" executable from \"foo.ss\" using"
       "the same petite.boot and scheme.boot that swish uses."
       "If we specified only -b scheme, the resulting foo.boot would"
       "not be truly stand-alone, since scheme.boot requires petite.boot.\n")
     (example (who "-o foo -b petite -b scheme --rtlib swish foo.ss")
       "builds a stand-alone \"foo\" executable from \"foo.ss\" using the"
       "same petite.boot and scheme.boot that swish uses and makes the"
       "standard swish libraries available at run time, so that \"foo\""
       "can compile code that uses those libraries.\n")
     (example (who "-o foo.library --library foo.ss")
       "compiles the \"foo.ss\" library to \"foo.library\" and generates"
       "\"foo.wpo\" for use by whole-program optimization.\n")
     (example (who "-c bar.ss -o bar.component --rtlib foo.library bar.library")
       "compiles the \"bar.ss\" program to \"bar.component\", which expects"
       "\"foo.library\" and \"bar.library\" to be provided at run time.")
     ])
  (let ([invalid (fold-right remq sections help-sections)])
    (unless (null? invalid)
      (fail "unrecognized help section~p:~{ ~a~}" (length invalid) invalid)))
  (exit 0))

(define-syntax target-case
  (syntax-rules ()
    [(_ expr [(k0 k1 ...) e0 e1 ...] ...)
     ;; require all cases
     (equal? '(component library linked stand-alone)
       (sort (lambda (a b) (string<? (symbol->string a) (symbol->string b)))
         (apply append (datum ((k0 k1 ...) ...)))))
     (let ([target expr])
       (case expr
         [(k0 k1 ...) e0 e1 ...] ...
         [else (match target)]))]))

(define (parse-library lib)
  (parameterize ([library-directories lib])
    (library-directories)))

;; create tmp file:
;;  - on the same filesystem as basis, else rename-path will fail
;;  - with known extension, since compile-whole-program replaces
;;    extension with .wpo
(define (tmp-filename basis)
  (format "~a-~36r.tmp" (path-root basis)
    (bytevector-uint-ref (osi_make_uuid) 0 'little 16)))

(define (change-extension fn new-ext)
  (string-append (path-root fn) new-ext))

(define (platform-boot-file output-fn)
  (string-append
    (case (machine-type)
      [(a6nt i3nt ta6nt ti3nt)
       ;; On WIN32, Swish strips the .exe extension when looking for the boot
       ;; file, as Chez Scheme does, so we strip .exe when creating the file.
       (if (string-ci=? "exe" (path-extension output-fn))
           (path-root output-fn)
           output-fn)]
      [else output-fn])
    ".boot"))

;; to handle things like ".chezscheme.sls" -> ".chezscheme.so"
(define (change-suffix filename old-ext new-ext)
  (and (ends-with? filename old-ext)
       (string-append (substring filename 0 (- (string-length filename) (string-length old-ext)))
         new-ext)))

(define (object-filename source-fn)
  (ormap (lambda (pr) (change-suffix source-fn (car pr) (cdr pr)))
    (library-extensions)))

(define (copy ip op)
  (define buflen (expt 2 16))
  (define buf (make-bytevector buflen))
  (let cp ()
    (let ([n (get-bytevector-n! ip buf 0 buflen)])
      (unless (eof-object? n)
        (put-bytevector op buf 0 n)
        (cp)))))

(define (copy-file input-fn output-fn)
  (let ([op (open-binary-file-to-replace output-fn)]
        [mode (bitwise-and #o777 (<stat> mode (get-stat input-fn)))])
    (on-exit (begin (close-port op) (set-file-mode output-fn mode))
      (copy-to-port op (list input-fn)))))

(define (copy-to-port op input-fn*)
  (for-each
   (lambda (input-fn)
     (let ([ip (open-binary-file-to-read input-fn)])
       (on-exit (close-port ip)
         (copy ip op))))
   input-fn*))

(define (rm-f filename)
  (catch (remove-file filename)))

;; wrap contents of source-fn in a top-level program with standard imports
(define (do-compile-program source-fn dest)
  (with-sfd-source-offset source-fn
    (lambda (ip sfd source-offset)
      (define annotated-source
        (get-datum/annotations-all ip sfd source-offset))
      (define dummy-annotation
        (match annotated-source
          [(,x . ,_) (annotation-source x)]
          [,_ (make-source-object sfd 0 0)]))
      (define (annotate form)
        (make-annotation form dummy-annotation form))
      (define program
        ;; source-fn must not use top-level-program, since it is spliced in as body
        `(,(annotate 'top-level-program)
          ,(annotate '(import (scheme) (swish imports)))
          ,@annotated-source))
      (compile-to-file (list program) dest sfd))))

(define (compile-help source-fn obj-fn target-type)
  (define default-library-search (library-search-handler))
  (parameterize ([library-search-handler
                  (lambda (who path dir* all-ext*)
                    (let-values ([(src-path obj-path obj-exists?)
                                  (default-library-search who path dir* all-ext*)])
                      (values src-path obj-path
                        (and obj-exists?
                             ;; - don't rebuild if we got this library via --rtlib
                             ;; - if we have source and we're expected to generate
                             ;;   wpo files for this library, then finding a ".so" file
                             ;;   is not enough; we also need an up-to-date ".wpo" file
                             ;;   for the use by compile-wpo
                             (or (not src-path)
                                 (hashtable-ref prevent-wpo path #f)
                                 (not (generate-wpo-files))
                                 (let ([wpo-file (string-append (path-root obj-path) ".wpo")])
                                   (and (file-exists? wpo-file)
                                        ;; account for low-resolution HFS timestamps
                                        (time>=?
                                         (file-modification-time wpo-file)
                                         (file-modification-time src-path)))))))))]
                 [compile-library-handler
                  (lambda (source dest)
                    (when (> (verbosity) 0) (printf "compiling ~a\n" source))
                    (compile-library source dest))])
    (target-case target-type
      [(library)
       (compile-library source-fn obj-fn)]
      [(component linked stand-alone)
       (do-compile-program source-fn obj-fn)])))

(define (compile-wpo wpo-file output-fn target-type)
  (define default-library-search (library-search-handler))
  (parameterize ([library-search-handler
                  (lambda (who path dir* all-ext*)
                    (if (ormap (lambda (p) (match p [(,_ . ".wpo") #t] [,_ #f])) all-ext*)
                        (if (hashtable-ref prevent-wpo path #f)
                            (values #f #f #f)
                            (default-library-search who path dir* all-ext*))
                        (match (catch (library-object-filename path))
                          [,obj-file
                           (guard (string? obj-file))
                           (values #f obj-file (file-exists? obj-file))]
                          [,_
                           (default-library-search who path dir* all-ext*)])))])
    (target-case target-type
      [(library)
       (let ([missing (compile-whole-library wpo-file output-fn)])
         (rename-path wpo-file (change-extension output-fn ".wpo"))
         missing)]
      [(component linked stand-alone)
       (let ([missing (compile-whole-program wpo-file output-fn (opt 'libs-visible))])
         (rm-f wpo-file)
         missing)])))

(define (do-compile source-fn output-fn swish-wpo? target-type)
  (let* ([obj-fn (object-filename source-fn)]
         [tmp-fn (if obj-fn #f (tmp-filename output-fn))]
         [obj-fn (or obj-fn tmp-fn)])
    (on-exit (target-case target-type
               [(library) (when tmp-fn (rm-f tmp-fn))]
               [(component linked stand-alone)
                (unless (string=? obj-fn output-fn)
                  (rm-f obj-fn))])
      (when (> (verbosity) 0) (printf "compiling ~a\n" (source-file)))
      (parameterize ([generate-inspector-information #f]
                     [generate-procedure-source-information #t]
                     [generate-wpo-files #t]
                     [compile-imported-libraries #t]
                     [compile-file-message #f])
        (compile-help source-fn obj-fn target-type)
        (let* ([wpo-file (change-extension obj-fn ".wpo")]
               [libs (compile-wpo wpo-file output-fn target-type)]
               [missing-libs
                ;; Stand-alone program should have found all required non-swish libraries.
                ;; If swish libraries are incorporated via whole-program optimization,
                ;; then we must also have found the wpo files for those libraries.
                ;; Dependent programs can use swish libraries included in runtime,
                ;; as can stand-alone programs that explicitly specify --rtlib swish.
                (if swish-wpo?
                    libs
                    (remp swish-lib? libs))])
          missing-libs)))))

(define boot-file-map
  (let ([cache #f])
    (lambda ()
      (unless cache
        (set! cache (build-boot-file-map)))
      cache)))

(define (build-boot-file-map)
  (let-values ([(to-stdin from-stdout from-stderr os-pid)
                (spawn-os-process (osi_get_executable_path) '("--verbose") self)])
    (close-port to-stdin)
    (let ([from-stderr (binary->utf8 from-stderr)])
      (let lp ([als '()])
        (let ([line (get-line from-stderr)])
          (if (eof-object? line)
              als
              (lp
               (match (pregexp-match (re "^trying (.*)\\.\\.\\.opened\r?$") line)
                 [(,_ ,fn)
                  (cons (cons (path-last fn) fn) als)]
                 [,_ als]))))))))

(define (resolve-boot-file boot)
  (cond
   [(regular-file? boot) boot]
   [(assoc boot (boot-file-map)) => cdr]
   [(assoc (string-append boot ".boot") (boot-file-map)) => cdr]
   [else (fail "cannot resolve boot file ~a" boot)]))

(define (find-rt-lib rt-lib lib-dirs)
  (if (regular-file? rt-lib)
      (get-real-path rt-lib)
      (ormap (lambda (lib-dir)
               (let ([filename (path-combine (cdr lib-dir) rt-lib)])
                 (and (regular-file? filename)
                      (get-real-path filename))))
        lib-dirs)))

;; resolve to real path name; expand system libraries; preserve order; keep first occurence
(define (resolve-rt-libs rt-lib* lib-dirs)
  (define (cons-unique rt-lib ls)
    (if (member rt-lib ls)
        ls
        (cons rt-lib ls)))
  (define (add ls rt-lib)
    (cond
     [(find-rt-lib rt-lib lib-dirs) =>
      (lambda (filename) (cons-unique filename ls))]
     [(equal? rt-lib "swish")
      (cons-unique swish-library-filename
        (cons-unique swish-core-library-filename ls))]
     [else (fail "cannot resolve --rtlib ~s" rt-lib)]))
  (reverse (fold-left add '() rt-lib*)))

(define (resolve-missing-libs target-type rt-libs missing-libs)
  (define ht (make-hashtable string-hash string=?))
  (define no-file-key "")
  (define (add! key lib)
    (hashtable-update! ht key (lambda (x) (cons lib x)) '()))
  (for-each
   (lambda (lib)
     (match (catch (get-real-path (library-object-filename lib)))
       [#(EXIT ,reason)
        (add! no-file-key lib)]
       [,obj-file
        (guard (string? obj-file))
        (add! obj-file lib)]))
   missing-libs)
  ;; Prune --rtlib libraries from missing-libs, if needed.
  (when (target-case target-type
          [(component library) (= (verbosity) 0)]
          [(linked stand-alone) #t])
    (for-each (lambda (rt-lib) (hashtable-delete! ht rt-lib))
      rt-libs))
  (let-values ([(keys vals) (hashtable-entries ht)])
    (let ([files (vector->list keys)]
          [libs (vector->list vals)])
      (target-case target-type
        [(component library)
         (match (sort (lambda (a b) (string<? (car a) (car b)))
                  (map cons files libs))
           [() (void)]
           [,to-provide
            (printf "These libraries must be provided at run time:\n")
            (for-each
             (lambda (p)
               (match p
                 [(,obj-file . ,libraries)
                  (wrap-text (current-output-port) (help-wrap-width) 0 2
                    (if (equal? no-file-key obj-file)
                        (format "Cannot determine file that provides:~{ ~s~}" libraries)
                        (format "~a~@[:~{ ~s~}~]" obj-file (and (>= (verbosity) 2) libraries))))
                  (newline)]))
             to-provide)])]
        [(linked stand-alone)
         (cond
          [(hashtable-ref ht no-file-key #f) =>
           (lambda (missing)
             (fail "cannot resolve missing librar~@p~{ ~s~}" (length missing) missing))]
          [(= (verbosity) 0)]
          [(pair? libs)
           (pretty-print libs)
           (printf "Added without whole-program optimization:~{~{ ~s~}~}\n" libs)])])
      files)))

(define (show-files target-type app-boot boot-files rt-libs other-libs source-fn)
  (when (> (verbosity) 1)
    (printf "making ~a program~@[ boot file ~s~] from:" target-type app-boot)
    (printf "~@[~{\n-b      ~a~}~]" boot-files)
    (printf "~{\n--rtlib ~a~}" rt-libs)
    (printf "~{\n        ~a~}" other-libs)
    (printf "\n        ~a\n" source-fn)))

(define (try-parse)
  (define problem #f)
  (define lib-opt
    (parse-command-line-arguments
     (append escape-hatch shared-cli library-cli)
     (command-line-arguments)
     (lambda x (unless problem (set! problem x)))))
  (if (lib-opt 'as-library)
      (if problem
          (apply fail problem)
          lib-opt)
      (parse-command-line-arguments (append escape-hatch shared-cli app-cli))))

(define opt (try-parse))

(define (source-file)
  (match (opt 'explicit-source)
    [#f (opt 'source-file)]
    [() (opt 'source-file)]
    [(,source-fn) (and (not (opt 'source-file)) source-fn)]
    [,_ #f]))

(cond
 [(opt 'srcdirs) =>
  (lambda (srcdirs)
    (source-directories (append srcdirs (source-directories))))])

(cond
 [(zero? (hashtable-size (opt))) (usage #t '() #f)]
 [(opt 'help) =>
  (lambda (sections)
    (usage #f (map string->symbol sections) (opt)))]
 [(opt 'version)
  (printf "~a Version ~a (~a)\n" who
    (software-version 'swish)
    (software-revision 'swish))]
 [else
  (let* ([source-fn
          (or (source-file)
              (fail "requires a single source filename"))]
         [output-fn
          (or (opt 'output-file)
              (fail "requires output filename"))]
         [target-type
          (cond
           [(hashtable-ref (opt) 'as-library #f) 'library]
           [(opt 'boot-files) 'stand-alone]
           [(opt 'component) 'component]
           [else 'linked])]
         [libdirs (fold-right
                   (lambda (x acc)
                     (append (parse-library x) acc))
                   (library-directories)
                   (or (opt 'libdirs) '()))]
         [rt-libs (resolve-rt-libs (or (opt 'rt-libs) '()) libdirs)])
    (verbosity (or (opt 'verbose) 0))
    (import-notify (> (verbosity) 2))
    (target-case target-type
      [(library)
       (library-setup #f libdirs rt-libs)
       (resolve-missing-libs 'library rt-libs
         (do-compile source-fn output-fn #f 'library))]
      [(stand-alone)
       ;; Add location of swish system .wpo files only if we're building a
       ;; stand-alone program (boot-files non-empty).
       (let* ([boot-files (map resolve-boot-file (opt 'boot-files))]
              [swish-wpo?
               (or (null? rt-libs)
                   ;; don't use wpo for swish library if we're including it as a
                   ;; run-time library, else we could duplicate code
                   (not (member swish-library-filename rt-libs)))]
              [rt-libs
               ;; Always include swish-core.library as --rtlib and disable
               ;; whole-program optimization for (swish app-core) and its
               ;; dependencies since these are required by the boot process
               ;; for stand-alone apps and we don't want to risk duplicating
               ;; those libraries within the compiled top-level program itself.
               (if (member swish-core-library-filename rt-libs)
                   rt-libs
                   (cons swish-core-library-filename rt-libs))]
              [_ (library-setup swish-wpo? libdirs rt-libs)]
              [other-libs
               (resolve-missing-libs 'stand-alone rt-libs
                 (do-compile source-fn output-fn swish-wpo? target-type))]
              [app-boot (platform-boot-file output-fn)]
              [compiled-code
               (let ([ip (open-binary-file-to-read output-fn)])
                 (on-exit (close-port ip)
                   (get-bytevector-all ip)))])
         (show-files target-type app-boot boot-files rt-libs other-libs source-fn)
         ;; This expression must not reference exports that may
         ;; participate in whole-program optimization, since that could
         ;; result in duplicate library initialization within the compiled
         ;; code.  Referencing exports provided by swish-core.library is
         ;; fine, since they are excluded from wpo.
         (compile-to-file
          `((suppress-greeting #t)
            (let ([orig (scheme-start)])
              (scheme-start
               (lambda args
                 (scheme-start orig)
                 ($swish-start #t args
                   (lambda ()
                     (load-compiled-from-port (open-bytevector-input-port ',compiled-code))))))))
          output-fn)
         (apply make-boot-file app-boot '()
           (append boot-files rt-libs other-libs (list output-fn)))
         (copy-file (osi_get_executable_path) output-fn))]
      [(component)
       (library-setup #f libdirs rt-libs)
       (resolve-missing-libs target-type rt-libs
         (do-compile source-fn output-fn #f target-type))
       (show-files target-type #f #f rt-libs '() source-fn)]
      [(linked)
       (library-setup #f libdirs rt-libs)
       (let* ([missing (do-compile source-fn output-fn #f target-type)]
              [ns-other-libs
               (remp swish-library-file?
                 (resolve-missing-libs 'linked rt-libs missing))]
              [ns-rt-libs (remp swish-library-file? rt-libs)]
              [hashbang
               (let ([ip (open-binary-file-to-read source-fn)])
                 (on-exit (close-port ip)
                   (let ([end (get-source-offset ip)])
                     (and (> end 0)
                          (begin (file-position ip 0) #t)
                          (get-bytevector-n ip end)))))]
              [tmp (tmp-filename output-fn)]
              [ip (open-binary-file-to-read output-fn)]
              [op (open-file tmp (+ O_WRONLY O_CREAT O_TRUNC) #o777 'binary-output)])
         (define (cleanup) (close-port ip) (close-port op))
         (match (catch
                 (show-files target-type #f #f ns-rt-libs ns-other-libs source-fn)
                 (put-bytevector op (or hashbang (string->utf8 "#!/usr/bin/env swish\n")))
                 (copy-to-port op (append ns-rt-libs ns-other-libs))
                 (copy ip op))
           [#(EXIT ,reason)
            (cleanup)
            (rm-f tmp)
            (raise reason)]
           [,_
            (cleanup)
            (rename-path tmp output-fn)]))]))])
