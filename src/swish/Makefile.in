.PHONY: all build-dirs clean platform-clean ready reminders

CORE := ../../${BUILD}/bin/swish${EXESUFFIX} ../../${BUILD}/bin/swish.boot ../../${BUILD}/bin/swish.library
AUXLIB := ../../${BUILD}/lib/swish/mat.so ../../${BUILD}/lib/swish/profile.so ../../${BUILD}/lib/swish/testing.so

ready: Makefile build-dirs io-constants.ss clibs git.revision
	@if git submodule status --recursive | grep -q '^[^ ]'; then \
	  echo "Please update git submodules (or stage submodule change)."; \
	  exit 1; \
	fi

Makefile: Makefile.in ../../configure
	$(error re-run configure to update Makefile)

build-dirs:
	@mkdir -p ../../${BUILD}/bin
	@mkdir -p ../../${BUILD}/lib

all: ready ${CORE} ${AUXLIB} ${REMINDERS}

# force evaluation
.PHONY: git.revision
git.revision:
	@git describe --always --exclude='*' --abbrev=40 --dirty > git.revision.tmp
	@if cmp --quiet git.revision git.revision.tmp; then \
	  rm git.revision.tmp; \
	else \
	  mv git.revision.tmp git.revision; touch software-info.ss; echo "git-revision changed"; \
	fi

io-constants.ss: io-constants${EXESUFFIX}
	./$< > $@

../../libuv/include:
	git submodule update --init ../../libuv
	git clone https://github.com/chromium/gyp.git ../../libuv/build/gyp

../../${BUILD}/bin/swish.boot: boot.ss ../../${BUILD}/bin/swish.library
	@echo \
	'(library-directories (quote ()))' \
	'(make-boot-file "../${BUILD}/bin/swish.boot" (quote ("scheme" "petite")) "../${BUILD}/bin/swish.library" "swish/boot.ss")' \
	| "${SCHEME}" -q ../../${BUILD}/bin/swish.library compile.ss

../../${BUILD}/bin/swish.library: *.ss
	@echo \
	'(library-directories (quote (("." . "../${BUILD}/lib"))))' \
	'(library-extensions (quote ((".ss" . ".wpo"))))' \
	'(generate-wpo-files #t)' \
	'(import (swish imports))' \
	'(printf "compiling swish.library~%")' \
	'(compile-whole-library "../'${BUILD}'/lib/swish/imports.wpo" "../${BUILD}/bin/swish.library")' \
	| "${SCHEME}" -q compile.ss

../../${BUILD}/lib/swish/%.so: %.ss ../../${BUILD}/bin/swish${EXESUFFIX} ../../${BUILD}/bin/swish.library
	@echo \
	'(library-directories (quote (("." . "../${BUILD}/lib"))))' \
	'(generate-wpo-files #t)' \
	'(import (swish $(<:.ss=)))' \
	| ../../${BUILD}/bin/swish${EXESUFFIX} -q -- compile.ss

clean: platform-clean
	rm -f git.revision
	rm -f io-constants.ss
	rm -f ../*.ss.html ../mat-report.html ../server-profile.html
	rm -f *.mo *.ms.html *.ss.html

.PHONY: install install-bin install-check install-doc
INSTLIBDIR := ${INSTALLROOT}/lib/swish${SWISH_VERSION}/${MACHINE_TYPE}
INSTWEBDIR := ${INSTALLROOT}/lib/swish${SWISH_VERSION}/web
INSTDOCDIR := ${INSTALLROOT}/share/doc/swish${SWISH_VERSION}

install: ready install-doc install-bin

install-check:
ifeq (,${INSTALLROOT})
	$(error INSTALLROOT is not set)
endif

install-doc: install-check
	${GNU_INSTALL} --directory ${INSTDOCDIR}
	${GNU_INSTALL} ../../LICENSE ${INSTDOCDIR}
	${GNU_INSTALL} ../../NOTICE ${INSTDOCDIR}
	${GNU_INSTALL} ../../doc/swish.pdf ${INSTDOCDIR}

install-bin: install-check all
	${GNU_INSTALL} --directory ${INSTLIBDIR}
	${GNU_INSTALL} ../../${BUILD}/bin/swish${EXESUFFIX} ${INSTLIBDIR}
	${GNU_INSTALL} swish-build ${INSTLIBDIR}
	${GNU_INSTALL} swish-test ${INSTLIBDIR}
	${GNU_INSTALL} ../../${BUILD}/bin/swish.boot ${INSTLIBDIR}
	${GNU_INSTALL} ../../${BUILD}/bin/swish.library ${INSTLIBDIR}
	${GNU_INSTALL} ${SwishLibs} ${INSTLIBDIR}
	${GNU_INSTALL} --directory ${INSTALLROOT}/bin
	ln -sf ${INSTLIBDIR}/swish${EXESUFFIX} ${INSTALLROOT}/bin/swish
	ln -sf ${INSTLIBDIR}/swish-build ${INSTALLROOT}/bin/swish-build
	ln -sf ${INSTLIBDIR}/swish-test ${INSTALLROOT}/bin/swish-test
	${GNU_INSTALL} --directory ${INSTLIBDIR}/lib
	cd ../../${BUILD}/lib ; find . -type f -name '*.wpo' -exec ${GNU_INSTALL} -D -T {} ${INSTLIBDIR}/wpo/{} \;
	cd ../../${BUILD}/lib ; find . -type f -name '*.so' -exec ${GNU_INSTALL} -D -T {} ${INSTLIBDIR}/lib/{} \;
	${GNU_INSTALL} ../../${BUILD}/lib/swish/mat.so ${INSTLIBDIR}/lib/swish
	${GNU_INSTALL} ../../${BUILD}/lib/swish/profile.so ${INSTLIBDIR}/lib/swish
	${GNU_INSTALL} ../../${BUILD}/lib/swish/testing.so ${INSTLIBDIR}/lib/swish
	${GNU_INSTALL} --directory ${INSTWEBDIR}
	cd ../../web ; find . -type f -exec ${GNU_INSTALL} -D -T {} ${INSTWEBDIR}/{} \;

.PHONY: mat-prereq
mat-prereq:
	@printf "making mat-prereq ... "
	@rm -rf ../../build/mat-prereq
	@make install-bin INSTALLROOT="$$(${NORMALIZE_PATH} ../../build/mat-prereq)" SWISH_VERSION=".x.y.z" MACHINE_TYPE="arch" > /dev/null
	@printf "done.\n"
