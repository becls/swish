#!/bin/sh

set -eu

ERRORS=

# accumulate errors if we haven't yet processed --help
err() {
  ERRORS=$(printf "%s\\n! %s\\n" "${ERRORS}" "$*")
}

no_errors() {
  test ${#ERRORS} -eq 0
}

checkerrs() {
  if no_errors; then return; fi
  printf "%s\\n" "${ERRORS}"
  exit 1
}

# minimal sanity check that we're being run from the right place
if [ ! -d src/swish ] || [ ! -f src/swish/Mf-base ]; then
  err "Must run $(basename "$0") at the root of the swish source distribution"
fi

help=no
PREFIX=
SCHEME=
CUSTOMPATH=
CUSTOMHEAPDIRS=
CONFIG_UNAME="$(uname -s)"
MYCC=
MYCPPFLAGS=
MYCFLAGS=
MYLDFLAGS=
TOOLPREFIX=

case "${CONFIG_UNAME}" in
  CYGWIN_NT-* | MINGW64_NT-* | MSYS_NT-*)
    Windows=yes
    EXESUFFIX=.exe
    DLLSUFFIX=.dll
    NORMALIZE_PATH="cygpath -au"
    ;;
  Darwin)
    Windows=no
    EXESUFFIX=
    DLLSUFFIX=.dylib
    NORMALIZE_PATH="realpath -m"
    ;;
  *)
    Windows=no
    EXESUFFIX=
    DLLSUFFIX=.so
    NORMALIZE_PATH="realpath -m"
    ;;
esac

quote () { printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" ; }

setoption() {
  _var="$1"
  _opt="$2"
  _val="${3#${_opt}}"
  if [ -z "${_val}" ]; then
    err "Option requires value: ${_opt}"
  elif [ -n "$(eval "echo \$${_var}")" ]; then
    err "Repeated option ${_opt}=${_val}"
  else
    eval "${_var}=$(quote "${_val}")"
  fi
}

while [ $# != 0 ]; do
  case "$1" in
    --help)
      help=yes
      ;;
    --toolprefix=*)
      setoption "TOOLPREFIX" "--toolprefix=" "$1"
      ;;
    --prefix=*)
      setoption "PREFIX" "--prefix=" "$1"
      ;;
    --scheme=*)
      setoption "SCHEME" "--scheme=" "$1"
      ;;
    CC=*)
      setoption "MYCC" "CC=" "$1"
      ;;
    CPPFLAGS=*)
      setoption "MYCPPFLAGS" "CPPFLAGS=" "$1"
      ;;
    CFLAGS=*)
      setoption "MYCFLAGS" "CFLAGS=" "$1"
      ;;
    LDFLAGS=*)
      setoption "MYLDFLAGS" "LDFLAGS=" "$1"
      ;;
    *)
      err "Unrecognized option ${1}"
  esac
  shift
done

: "${PREFIX:=/usr/local}"
: "${MYCC:=${TOOLPREFIX}${CC:-gcc}}"
: "${MYCPPFLAGS:=${CPPFLAGS:-}}"
: "${MYCFLAGS:=${CFLAGS:-}}"
: "${MYLD:=${TOOLPREFIX}${LD:-ld}}"
: "${MYLDFLAGS:=${LDFLAGS:-}}"

deref() { eval printf '%s' "$(printf '"%s"' "\$$1")"; }
weak_tilde_expansion() { printf %s\\n "$1" | sed "s_^~/_${HOME}/_" ; }

resolve() {
  _var="$1"
  _opt="$2"
  _default="$3"
  # dereference $_var and take default if empty
  _val="$(deref "${_var}")"
  _val="${_val:-${_default}}"
  # search PATH after limited tilde expansion
  set +e
  _resolved="$(command -v "$(weak_tilde_expansion "${_val}")")"
  set -e
  if [ -z "${_resolved}" ]; then
    err "Unable to resolve ${_opt}${_val} (no executable found)"
  fi
  eval "${_var}=$(quote "${_resolved}")"
}

resolve "SCHEME" "--scheme=" "scheme"

if no_errors; then
  SCHEME="$(realpath "${SCHEME}")"
fi

if [ -n "${PREFIX}" ]; then
  # use absolute path, after limited tilde expansion, since "make install"
  # runs in src/swish where a relative path would cause confusion
  PREFIX="$(realpath -m "$(weak_tilde_expansion "${PREFIX}")")"
fi

notilde() {
  _val="$(deref "$1")"
  if [ "${_val}" != "$(printf %s "${_val}" | sed "s/~//")" ]; then
    err "Unable to resolve ~ in $1=${_val}"
  fi
}

notilde "PREFIX"
notilde "SCHEME"

if [ "${help}" = "yes" ]; then
  configure="$(basename "$0")"
  echo "Usage: ${configure} [options]"
  echo ""
  echo "${configure} creates a Makefile for the host machine type,"
  echo "taking into account the following options."
  echo ""
  echo " --prefix=<pathname>  install directory base (${PREFIX})"
  echo " --scheme=<pathname>  Chez Scheme executable (${SCHEME})"
  echo " --toolprefix=<prefix>  prefix for \${CC} and \${LD} (${TOOLPREFIX})"
  echo " CC=<C compiler name>             optional C compiler name (${MYCC})"
  echo " CPPFLAGS=<C preprocessor flags>  additional C preprocessor flags (${MYCPPFLAGS})"
  echo " CFLAGS=<C compiler flags>        additional C compiler flags (${MYCFLAGS})"
  echo " LD=<linker name>                 optional linker name (${MYLD})"
  echo " LDFLAGS=<linker flags>           additional linker flags (${MYLDFLAGS})"
  checkerrs
  exit 0
fi

checkerrs

set_machine_type() {
  MACHINE_TYPE=$(echo '(machine-type)' | "${SCHEME}" -q 2>/dev/null)
  return $?
}

try_custom() {
  if [ -z "${SCHEMEHEAPDIRS:-}" ]; then
    # help the specified Scheme find its boot files
    export SCHEMEHEAPDIRS
    _bindir="$(dirname "${SCHEME}")"
    if [ "${Windows}" = "yes" ]; then
      # The %x escape would work while using Scheme to build swish.library,
      # e.g., SCHEMEHEAPDIRS="%x;%x\\..\\boot\\%m;", but this would not work
      # when we use swish itself to compile mat.so and friends, since %x would
      # be ./bin/swish.exe, so insert absolute Windows path to the directory
      # containing scheme.exe in place of %x.
      _bindir="$(cygpath -w "${_bindir}")"
      SCHEMEHEAPDIRS="${_bindir};${_bindir}\\..\\..\\boot\\%m;${_bindir}\\..\\lib\\csv%v\\%m"
    else
      SCHEMEHEAPDIRS="$(realpath "${_bindir}/../../boot")/%m:$(realpath "${_bindir}/../lib")"/csv%v/%m
    fi
    CUSTOMHEAPDIRS="${SCHEMEHEAPDIRS}"
  fi
  false
}

noscheme() {
  err "Cannot run Scheme via \"${SCHEME}\""
  err "Please retry with --scheme set appropriately."
  if [ -z "${SCHEMEHEAPDIRS:-}" ]; then
    err "* it may be necessary to set SCHEMEHEAPDIRS as well"
  elif [ -z "${CUSTOMHEAPDIRS}" ]; then
    err "* incompatible SCHEMEHEAPDIRS (${SCHEMEHEAPDIRS})"
    err "  try unsetting to let configure take a guess"
  fi
  checkerrs
}

# try to determine machine type, setting custom SCHEMEHEAPDIRS if necessary
set +e
set_machine_type || try_custom || set_machine_type || noscheme
set -e

BASE_MACHINE_TYPE="${MACHINE_TYPE#t}"

if [ ! -f "src/swish/Mf-${BASE_MACHINE_TYPE}" ]; then
  err "Machine type ${MACHINE_TYPE} is not supported."
  checkerrs
fi

path_first() {
  printf %s\\n "$1" | sed 's_^\(/[^/]*\).*_\1_'
}

find_boot_file() {
  PETITE_BOOT="$(echo |
                "${SCHEME}" -q --verbose -b petite.boot 2>&1 |
                tr -d '\r' |
                grep '^trying .*opened' |
                sed 's/^trying \(.*\)\.\.\.opened$/\1/')"
  # now check to see if the boot file we found makes sense
  if [ "${Windows}" = "yes" ]; then
    _bootfile="$(cygpath -u "${PETITE_BOOT}")"
  else
    _bootfile="${PETITE_BOOT}"
  fi
  _binprefix="$(path_first "${SCHEME}")"
  _bootprefix="$(path_first "${_bootfile}")"
  if [ "${_binprefix}" != "${_bootprefix}" ]; then
    echo "* Scheme is under ${_binprefix:-???}, but petite.boot is under ${_bootprefix:-???}."
    echo "  Perhaps you have installed Scheme but are now trying to build swish"
    echo "  using a Scheme that was compiled from source."
    echo ""
    if [ -z "${SCHEMEHEAPDIRS:-}" ]; then
      # The installed boot file may be sufficiently "compatible" with the Scheme
      # that was compiled from source that we were able to determine machine-type,
      # but that doesn't mean there isn't some more subtle difference, which may
      # be why we built Scheme from source, so ...
      echo "  Trying to set SCHEMEHEAPDIRS to ensure that we pick up changes in"
      echo "  the include files, kernel.o, and boot files for the specified Scheme."
      echo "  If you do not want this, set SCHEMEHEAPDIRS explicitly and retry."
      echo ""
      false
    else
      noscheme
    fi
  else
    true
  fi
}

# try to find boot file, setting custom SCHEMEHEAPDIRS if necessary
find_boot_file || try_custom || find_boot_file

# find .lib file and .dll for Windows build; ensure .dll is in PATH
if [ "${Windows}" = "yes" ]; then
  SchemeLibPrefix="$(echo '(printf "csv~{~a~}" (call-with-values scheme-version-number list))' | "${SCHEME}" -q)"
  SchemeLib="$(find "$(dirname "${SCHEME}")" -type f -name "${SchemeLibPrefix}.lib" | head -1)"
  if [ -z "${SchemeLib}" ]; then
    err "Cannot find ${SchemeLibPrefix}.lib for ${SCHEME}."
    checkerrs
  fi
  SCHEME_LIBPATH="$(dirname "${SchemeLib}")"
  SCHEME_LIBPATH="$(cygpath -w "${SCHEME_LIBPATH}")"

  SchemeDLL="$(find "$(dirname "${SCHEME}")" -type f -name "${SchemeLibPrefix}.dll" | head -1)"
  if [ -z "${SchemeDLL}" ]; then
    err "Cannot find ${SchemeLibPrefix}.dll for ${SCHEME}."
    checkerrs
  fi
  set +e
  DLLNAME="$(basename "${SchemeDLL}")"
  DLLFOUND="$(command -v "${DLLNAME}")"
  if [ "${DLLFOUND}" != "${SchemeDLL}" ]; then
    # try_custom since we likely need to set SCHEMEHEAPDIRS
    set +e
    try_custom
    set -e
    CUSTOMPATH="$(dirname "${SchemeDLL}")"
    export PATH
    PATH="${CUSTOMPATH}:${PATH}"
    if [ -z "${DLLFOUND}" ]; then
      echo "* ${DLLNAME} is not in PATH; building with custom PATH"
    else
      echo "* found another ${DLLNAME} in PATH; building with custom PATH"
    fi
    echo ""
    echo "  To run swish applications, either set"
    echo "    PATH=\"${CUSTOMPATH}:\${PATH}\""
    echo "  or"
    echo "    copy ${DLLNAME} to the directory containing"
    echo "    the swish executable"
    echo ""
  fi
  set -e
else
  SCHEME_LIBPATH="$(dirname "${PETITE_BOOT}")"
fi

# In cygwin, this is already a Windows path as needed by Mf-a6nt and Mf-i3nt.
SchemeInclude="$(dirname "${PETITE_BOOT}")"

check_missing() {
  if [ ! -f "$2/$1" ]; then
    err "Missing $1 at $2"
    checkerrs
  fi
}

# make sure we found scheme.h
if [ "${Windows}" = "yes" ]; then
  check_missing "scheme.h" "$(cygpath -au "${SchemeInclude}")"
else
  check_missing "scheme.h" "${SchemeInclude}"
  check_missing "kernel.o" "${SchemeInclude}"
fi

SWISH_VERSION=$(sed -n 's/^#define SWISH_VERSION \([0-9a-z."]*\)/\1/p' src/swish/swish.h)

escape_backslash() { printf "%s" "$1" | sed 's_\\_\\\\_g' ; }
ADD_TO=
add() {
  if [ "$1" = '-t' ]; then
    shift;
    printf "\\t%s\\n" "$@" >> "${ADD_TO}"
  else
    printf %s\\n "$@" >> "${ADD_TO}"
  fi
}

set_output() {
  COMMENT="$1"
  ADD_TO="$2"
  rm -f "${ADD_TO}"
  add "${COMMENT} DO NOT EDIT this file"
  add "${COMMENT} automatically generated by top-level configure script"
  add ""
}

BASE="$(git rev-parse --show-toplevel)"

SWISH_INCLUDE="${BASE}/src/swish"
SWISH_LIBPATH="${BASE}/build/release/bin"
LIBUV_INCLUDE="${BASE}/libuv/include"
case "${CONFIG_UNAME}" in
  CYGWIN_NT-* | MINGW64_NT-* | MSYS_NT-*)
    UvLib=libuv/build/Release
    ;;
  *)
    UvLib=libuv/build
    ;;
esac
LIBUV_LIBPATH="${BASE}/${UvLib}"
if [ "${Windows}" = "yes" ]; then
    SCHEME="$(cygpath -au "${SCHEME}")"
    SWISH_INCLUDE="$(cygpath -aw "${SWISH_INCLUDE}")"
    SWISH_LIBPATH="$(cygpath -aw "${SWISH_LIBPATH}")"
    LIBUV_INCLUDE="$(cygpath -aw "${LIBUV_INCLUDE}")"
    LIBUV_LIBPATH="$(cygpath -aw "${LIBUV_LIBPATH}")"
fi

set_output "#" src/swish/sh-config
add "export SCHEME='${SCHEME}'"
if [ -n "${SCHEMEHEAPDIRS:-}" ]; then
  add "export SCHEMEHEAPDIRS='${SCHEMEHEAPDIRS}'"
fi
if [ "${Windows}" = "yes" ]; then
  add "export SCHEME_WIN='$(cygpath -aw "${SCHEME}")'"
  add "export PATH='${PATH}'"
fi

set_output "#" src/swish/Mf-config
add "EXESUFFIX:=${EXESUFFIX}"
add "DLLSUFFIX:=${DLLSUFFIX}"
add "INSTALLROOT:=${PREFIX}"
add "BASE_MACHINE_TYPE:=${BASE_MACHINE_TYPE}"
add "MACHINE_TYPE:=${MACHINE_TYPE}"
add "SCHEME:=${SCHEME}"
if [ -n "${SCHEMEHEAPDIRS:-}" ]; then
  add "SCHEMEHEAPDIRS:=${SCHEMEHEAPDIRS:-}"
fi
add "SCHEME_INCLUDE:=${SchemeInclude}"
add "SCHEME_LIBPATH:=${SCHEME_LIBPATH}"
if [ "${Windows}" = "yes" ]; then
  add "SCHEME_LIB_PREFIX:=${SchemeLibPrefix}"
  add "SCHEME_REVISION_PATH:=$(cygpath -u "${SchemeInclude}")"
else
  add "SCHEME_REVISION_PATH:=${SchemeInclude}"
fi
add "SWISH_INCLUDE:=${SWISH_INCLUDE}"
add "SWISH_LIBPATH:=${SWISH_LIBPATH}"
add "SWISH_VERSION:=${SWISH_VERSION}"
add "LIBUV_INCLUDE:=${LIBUV_INCLUDE}"
add "LIBUV_LIBPATH:=${LIBUV_LIBPATH}"
add "NORMALIZE_PATH:=${NORMALIZE_PATH}"
if [ "${CONFIG_UNAME}" = "Darwin" ]; then
  add "GNU_INSTALL:=ginstall"
else
  add "GNU_INSTALL:=install"
fi

set_output ";;" src/osi-bootstrap.ss
if [ "${Windows}" = "yes" ]; then
  ROOT="$(cygpath -am "${BASE}")"
else
  ROOT="$(realpath -m "${BASE}")"
fi
add "(let ()"
add "  (define (path-combine . paths) (format \"~{~a~^/~}\" paths))"
add "  (define dir"
add "    (path-combine \"${ROOT}\""
add "      (if (equal? \"yes\" (getenv \"PROFILE_MATS\"))"
add "          \"build/profile\""
add "          \"build/release\")"
add "      \"bin\"))"
if [ "${Windows}" = "yes" ]; then
add "  (load-shared-object (path-combine dir \"uv${DLLSUFFIX}\"))"
add "  (load-shared-object (path-combine dir \"sqlite3${DLLSUFFIX}\"))"
add "  (load-shared-object (path-combine dir \"osi${DLLSUFFIX}\"))"
else
add "  (load-shared-object (path-combine dir \"libosi${DLLSUFFIX}\"))"
fi
add ")"

set_output "#" src/swish/Makefile
add "CC:=${MYCC}"
add "CPPFLAGS:=${MYCPPFLAGS}"
add "CFLAGS:=${MYCFLAGS}"
add "LD:=${MYLD}"
add "LDFLAGS:=${MYLDFLAGS}"
if [ "${Windows}" = "yes" ]; then
  if [ -n "${CUSTOMPATH}" ]; then
    case "${CONFIG_UNAME}" in
      MINGW64_NT-* | MSYS_NT-*)
        add "export PATH=$(cygpath -pw "${PATH}")"
        ;;
      *)
        add "export PATH=${PATH}"
        ;;
    esac
  fi
fi
if [ -n "${SCHEMEHEAPDIRS:-}" ]; then
   add "export SCHEMEHEAPDIRS = ${SCHEMEHEAPDIRS}"
fi
add ""
add "UvInclude=../../libuv/include"
add "UvLib=../../${UvLib}"
if [ -n "${CUSTOMPATH}${CUSTOMHEAPDIRS}" ]; then
  echo "* $(basename "$0") set these environment variables in src/swish/Makefile:"
  add ""
  add ".PHONY: reminders"
  add "REMINDERS:=reminders"
  add "reminders:"
  add -t "@echo \"----------------------------------------------------\""
  add -t "@echo \"You may need to set the following environment variables:\""
  if [ -n "${CUSTOMPATH}" ]; then
    echo "  PATH=\"${CUSTOMPATH}:\${PATH}\""
    add -t "@echo ' export PATH=\"$(escape_backslash "${CUSTOMPATH}"):\$\${PATH}\"'"
  fi
  if [ -n "${CUSTOMHEAPDIRS}" ]; then
    echo "  SCHEMEHEAPDIRS=\"${SCHEMEHEAPDIRS}\""
    add -t "@echo \" export SCHEMEHEAPDIRS=\\\"$(escape_backslash "${CUSTOMHEAPDIRS}")\\\"\""
  fi
  add -t "@echo \"----------------------------------------------------\""
fi
add ""
add "ifeq (yes,\${PROFILE_MATS})"
add "BUILD:=build/profile"
add "else"
add "BUILD:=build/release"
add "endif"
add ""
add "include Mf-config"
add "include Mf-${BASE_MACHINE_TYPE}"
add "include Mf-base"

git submodule update --init
